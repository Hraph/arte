#labels Arte,Index,Documentation
= Introduction =

This plug-in extend Ajax functionality of your web page. It brings the possibility to execute custom and repetitive actions in background of the page, so you can dialog with the server in real time.
It manages a continuous connection with the server. It create a *customizable loop* with an action queue to add some actions and *parse automatically* the XML response of the server to execute your appropriate/custom actions.


= Options =

When we call the first time the method $.arte(), we can add some options like *$.arte(options).*

The options must have to be in the following format:
{{{
$.arte({'option_name_1':value, 'option_name_2': value, ...});
}}}

We can notice that we can set options after the initialization by using the 'set' method:
{{{
$.arte().set('option_name', new_value);
}}}

*Here is now the list of available options*

  * *time*
It is an integer
It is the timer tick between each call of the loop

  * *ajax_mode*
Can be 'GET' or 'POST'
It is used for the ajax query inside the loop.

  * *ajax_type*
Same as the ajax type of ajax jquery standard
Most common are 'text' or 'xml'
It set the response type of the ajax request

  * *ajax_url*
it has to be an url format (like http://google.com, ajax_code.php or users.xml)
It is the remote file we want to access

  * *no_cache*
don't work, coming soon

  * *on_data_set*
It set the function which will be called before each ajax request to build the arguement string, so this function has to return a string type.
Ex:
{{{
function set_post_data(){
  return "arg1=" + arg1 + "&arg2=" + arg2;
}
}}}

  * *on_success*
It set the function which will be called after the ajax request
Ex:
{{{
/* From a text response */
function manage_text_result(data){
  alert("Response: " + data);
}

/* From a xml response */
function manage_xml_response(data){
  alert("Response: " + $(data).text() + " (attribut: " + $(data).attr('id'));
}
}}}


= Functions =

We can use some function to manage the background loop. Here's the list:

  * *start*
Used to start the background loop.
ex: 
{{{
$.arte().start();
}}}

  * *stop*
Used to stop the background loop.
ex: 
{{{
$.arte().stop();
}}}

  * *toogle*
Like JQuery toogle, it alternate automatically start and stop.
ex: 
{{{
$.arte().toogle();
}}}

  * *set*
Change an option.
Prototype: 
{{{
$.arte().set('option_name', new_value);
}}}
ex: 
{{{
$.arte().set('time', 5000);
}}}

  * *add_action*
In the case of xml mode only, it adds a custom command to parse the xml response.
Prototype: 
{{{
$.arte().add_action('xml_node_path', fct);
}}}
Ex: 
{{{
$.arte().add_action('image', display);
$.arte().add_action('users user', add_user);
}}}
In the above example, we may used the following xml response:
{{{
<?xml version="1.0" encoding="ISO-8859-1"?>
<content>
  <image>image 1</image>
  <users>
    <user>toto</user>
    <user>titi</user>
  </users>
</content>
}}}

  * *del_action*
In the case of xml mode only, it deletes a custom command which has been added by 'add_action'
Prototype: 
{{{
$.arte().del_action('xml_node_path');
}}}


= Examples =

*The more simple example we can demonstrate is a field refreshed in real time*.
(you can go to the source tab to download the 'demo' folder which contains the following example)

file ajax.php:
{{{
<?php
  echo rand();
?>
}}}

file index.html:
{{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<title>Demo Arte - simple text</title>
		<script src="../jquery.js" type="text/javascript"></script>
		<script src="../../jquery-plugin-arte.js" type="text/javascript"></script>
		<script type="text/javascript">
			$(document).ready(function(){
				$.arte({'ajax_url':'ajax.php', 'on_success':update_field}).start();
			});
			function update_field(data)
			{
				$("#test").text(data);
			}
		</script>
	</head>
	<body>
		<a href="..">back to the demo index</a>
		<h2>Demo1: Simple text from server</h2>
		<h3>Display every second a random value given by the server</h3>
		<br />
		"number of online users on my website:"<div id="test">0</div>
	</body>
</html>
}}}